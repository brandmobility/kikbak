<project name="Kikbak-Main" basedir="." >
	
	<import file="./build.patcher.xml" />
	
	<property name="build.dir" value="${user.dir}/build"/>
	
	<path id="files_to_copy" />
		
	<target name="init">
	    <echo message="init: ${module.name}" />

	    <!-- setup properties that depend on properties that should be defined in build scripts that import this one -->
	    <property name="compile.args" value="-Xlint:all -Xlint:-serial -Xlint:-path -Werror -encoding utf-8"/>
	
	    <property name="dist.dir" location="${build.dir}/${module.name}" />
		
		<property name="copy.sub.dir" value=""/>
		<property name="copy.dist.dir" location="${dist.dir}/${copy.sub.dir}" />
		<property name="copy.flatten" value="false"/>
	
	    <!-- this is the location of the intermediate bits generated during a build -->
	    <property name="bin.dir.name" value="bin"/>
	    <property name="bin.dir" value="${dist.dir}/${bin.dir.name}"/>
	
		<property name="classes.dir" value="${bin.dir}"/>
		<property name="lib.dir" value="${build.dir}/${module.name}/lib"/>
		        

	    <!-- this is the final location of generated src by the build -->
	    <property name="generated.src.dir" value="${dist.dir}/generatedsrc" />
	
	    <!-- this is the location of the JUnit reports -->
	    <property name="reports.dir.name" value="reports"/>
	    <property name="reports.dir" value="${dist.dir}/${reports.dir.name}"/>
	    <property name="reports.url" location="${reports.dir}/html/index.html" />
	
	    <!-- No main class if none is specified by the importing build file -->
	    <property name="module.main" value="" />
	    <path id="lib.classpath">
	        <fileset dir="${lib.dir}">
	            <include name="**/*.jar" />
	        </fileset>
	    </path>
	    <path id="project.classpath">
	        <pathelement location="${bin.dir}" />
	        <pathelement location="${bin.dir}/${classes.dir}" />
	        <path refid="lib.classpath" />
	    </path>
	
	    <!-- External command -->
	    <property name="skip.dependencies" value="${skip.package}"/>
	</target>


   <target name="-check-generate-jaxb">
        <condition property="should-generate-jaxb">
            <and>
                <isset property="schema.dir"/>
                <isset property="module.jaxb.package"/>
                <not>
                    <isset property="uptodate"/>
                </not>
            </and>
        </condition>
    </target>

    <target name="generate-jaxb" depends="-check-generate-jaxb,init" if="should-generate-jaxb">
        <apply executable="xjc">
            <arg value="-d" />
            <arg value="${generated.src.dir}" />
            <arg value="-p" />
            <arg value="${module.jaxb.package}" />
            <fileset dir="${schema.dir}" includes="*.xsd" />
        </apply>
    </target>

	
	<target name="create-classes-dir">
		<mkdir dir="${classes.dir}"/>
	</target>
	
	<target name="copy-files">
		<copy todir="${copy.dist.dir}" flatten="${copy.flatten}">
            <path refid="files_to_copy" />
        </copy>
	</target>
	
	<target name="make-dirs">
		<mkdir dir="${generated.src.dir}"/>
	</target>
	
	<target name="pre-compile" depends="make-dirs" unless="uptodate"/>
		
    <target name="compile" depends="init,pre-compile-ext,create-classes-dir,generate-jaxb,copy-files">
		<javac fork="true" 
			destdir="${classes.dir}" classpathref="lib.classpath" 
			includeantruntime="false"
			memoryinitialsize="1024m"
			memorymaximumsize="1024m">
            <compilerarg line="${compile.args}"/>
            <src path="${src.dir}" />
            <src path="${generated.src.dir}" />
        </javac>
    </target>

    <target name="build" depends="compile, pre-build-ext">
        <mkdir dir="${dist.dir}"/>
        <jar destfile="${dist.dir}/${archive.name}" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
    </target>

	<!-- extension points -->
	<extension-point name="pre-build-ext"/>
	<extension-point name="pre-compile-ext" depends="pre-compile" unless="uptodate"/>

</project>

